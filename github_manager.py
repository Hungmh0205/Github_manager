import sys
import os
import github
import webbrowser
from PyQt6.QtWidgets import QApplication, QWidget, QVBoxLayout, QPushButton, QFileDialog, QLineEdit, QLabel, QListWidget, QSplashScreen
from PyQt6.QtGui import QPixmap
from PyQt6.QtCore import Qt, QTimer
from PyQt6.QtGui import QPainter, QFont
from PyQt6.QtGui import QIcon
from PyQt6.QtWidgets import QMessageBox
from PyQt6.QtWidgets import QComboBox



class SplashScreen(QSplashScreen):
    def __init__(self):
        pixmap = QPixmap("splash.png").scaled(300, 300, Qt.AspectRatioMode.KeepAspectRatio, Qt.TransformationMode.SmoothTransformation)
        super().__init__(pixmap, Qt.WindowType.FramelessWindowHint)  # ·∫®n vi·ªÅn c·ª≠a s·ªï
        
    def paintEvent(self, event):
            """ V·∫Ω ch·ªØ tr·ª±c ti·∫øp l√™n Splash Screen v·ªõi font t√πy ch·ªânh """
            painter = QPainter(self)
            painter.setRenderHint(QPainter.RenderHint.Antialiasing)
        
            # Ch·ªânh font ch·ªØ theo √Ω mu·ªën
            font = QFont("Arial", 16, QFont.Weight.Bold)  # Thay "Arial" b·∫±ng font kh√°c n·∫øu mu·ªën
            painter.setFont(font)
            painter.setPen(Qt.GlobalColor.black)  # ƒê·ªïi m√†u ch·ªØ n·∫øu c·∫ßn

            # V·∫Ω ch·ªØ l√™n ·∫£nh Splash Screen
            painter.drawText(self.rect(), Qt.AlignmentFlag.AlignBottom | Qt.AlignmentFlag.AlignCenter, "Developed by Mai Huu Hung")

    def mousePressEvent(self, event):
        pass  
        
class GitHubManager(QWidget):
    def __init__(self):
        super().__init__()
        self.setWindowIcon(QIcon("splash.png"))  # ƒê·∫∑t icon cho c·ª≠a s·ªï ·ª©ng d·ª•ng
        self.initUI()
        self.github_token = ""
        self.repo = None
        self.current_path = ""

    def closeEvent(self, event):
        """ Ch·∫∑n ƒë√≥ng c·ª≠a s·ªï khi click v√†o logo, hi·ªÉn th·ªã c·∫£nh b√°o """
        reply = QMessageBox.question(
            self, "Tho√°t ·ª©ng d·ª•ng", "B·∫°n c√≥ ch·∫Øc mu·ªën tho√°t kh√¥ng?",
            QMessageBox.StandardButton.Yes | QMessageBox.StandardButton.No, QMessageBox.StandardButton.No
        )
        if reply == QMessageBox.StandardButton.Yes:
            event.accept()  # Cho ph√©p ƒë√≥ng ·ª©ng d·ª•ng
        else:
            event.ignore()  # H·ªßy s·ª± ki·ªán ƒë√≥ng

    def initUI(self):
        layout = QVBoxLayout()

        self.token_input = QLineEdit(self)
        self.token_input.setPlaceholderText("Nh·∫≠p GitHub Token...")
        layout.addWidget(self.token_input)

        self.connect_btn = QPushButton("K·∫øt n·ªëi GitHub", self)
        self.connect_btn.clicked.connect(self.connect_github)
        layout.addWidget(self.connect_btn)

        self.repo_input = QLineEdit(self)
        self.repo_input.setPlaceholderText("Nh·∫≠p t√™n repository (username/repo)...")
        layout.addWidget(self.repo_input)

        self.list_repos_btn = QPushButton("Danh s√°ch Repository", self)
        self.list_repos_btn.clicked.connect(self.list_repositories)
        layout.addWidget(self.list_repos_btn)


        self.load_repo_btn = QPushButton("T·∫£i danh s√°ch file", self)
        self.load_repo_btn.clicked.connect(self.load_repository_files)
        layout.addWidget(self.load_repo_btn)

        self.file_list = QListWidget(self)
        self.file_list.itemDoubleClicked.connect(self.open_repository)
        layout.addWidget(self.file_list)

        self.back_btn = QPushButton("Quay l·∫°i", self)
        self.back_btn.clicked.connect(self.go_back)
        layout.addWidget(self.back_btn)


        self.upload_btn = QPushButton("Upload file", self)
        self.upload_btn.clicked.connect(self.upload_file)
        layout.addWidget(self.upload_btn)

        self.upload_folder_btn = QPushButton("Upload th∆∞ m·ª•c", self)
        self.upload_folder_btn.clicked.connect(self.upload_folder)
        layout.addWidget(self.upload_folder_btn)

        self.update_btn = QPushButton("C·∫≠p nh·∫≠t file", self)
        self.update_btn.clicked.connect(self.update_file)
        layout.addWidget(self.update_btn)

        self.delete_btn = QPushButton("X√≥a file/th∆∞ m·ª•c", self)
        self.delete_btn.clicked.connect(self.delete_file)
        layout.addWidget(self.delete_btn)

        # Th√™m ph·∫ßn t·∫°o repository
        self.new_repo_input = QLineEdit(self)
        self.new_repo_input.setPlaceholderText("Nh·∫≠p t√™n repository ...")
        layout.addWidget(self.new_repo_input)

        self.repo_visibility = QComboBox(self)
        self.repo_visibility.addItems(["Public", "Private"])
        layout.addWidget(self.repo_visibility)

        self.create_repo_btn = QPushButton("T·∫°o Repository", self)
        self.create_repo_btn.clicked.connect(self.create_repository)
        layout.addWidget(self.create_repo_btn)

        #xo√° repository
        self.delete_repo_btn = QPushButton("X√≥a Repository", self)
        self.delete_repo_btn.clicked.connect(self.delete_repository)
        layout.addWidget(self.delete_repo_btn)

        #t·∫°o token
        self.generate_token_btn = QPushButton("T·∫°o Token GitHub", self)
        self.generate_token_btn.clicked.connect(self.generate_github_token)
        layout.addWidget(self.generate_token_btn)

        self.setLayout(layout)
        self.setWindowTitle("GitHub Manager")
        self.resize(400, 600)

    def connect_github(self):
        self.github_token = self.token_input.text().strip()
        try:
            self.github_client = github.Github(self.github_token)
            self.repo = None
            self.file_list.clear()
            self.file_list.addItem("‚úÖ K·∫øt n·ªëi GitHub th√†nh c√¥ng!")
        except Exception as e:
            self.file_list.addItem(f"‚ùå L·ªói k·∫øt n·ªëi: {e}")

    def list_repositories(self):
        """ Li·ªát k√™ danh s√°ch repository c·ªßa t√†i kho·∫£n GitHub """
        if not self.github_token:
            QMessageBox.warning(self, "L·ªói", "Vui l√≤ng nh·∫≠p GitHub Token!")
            return
    
        try:
            g = github.Github(self.github_token)
            user = g.get_user()
            repos = user.get_repos()
            self.file_list.clear()
            for repo in repos:
                self.file_list.addItem(repo.full_name)
        except Exception as e:
            QMessageBox.critical(self, "L·ªói", f"Kh√¥ng th·ªÉ l·∫•y danh s√°ch repository: {e}")


    def load_repository_files(self, path=""):
        repo_name = self.repo_input.text().strip()
        if not repo_name:
            self.file_list.addItem("‚ùå Vui l√≤ng nh·∫≠p t√™n repository!")
            return

    # N·∫øu path b·ªã False, ƒë·∫∑t l·∫°i th√†nh r·ªóng ("")
        if not isinstance(path, str):
            print("‚ö†Ô∏è L·ªói: path nh·∫≠n gi√° tr·ªã False, ƒë·∫∑t l·∫°i v·ªÅ ''")
            path = ""

        try:
            if "/" not in repo_name:
                self.file_list.addItem("‚ùå T√™n repository kh√¥ng h·ª£p l·ªá! H√£y nh·∫≠p d·∫°ng username/repo.")
                return

            try:
                self.repo = self.github_client.get_repo(repo_name)
            except github.GithubException as e:
                self.file_list.addItem(f"‚ùå Kh√¥ng t√¨m th·∫•y repository: {repo_name}. H√£y ki·ªÉm tra l·∫°i!")
                return
            try:
                contents = self.repo.get_contents(path)
            except github.GithubException as e:
                if e.status == 404:  # Repo r·ªóng
                    self.file_list.clear()
                    self.file_list.addItem("üìÇ Repository n√†y ƒëang tr·ªëng!")
                    return
                else:
                    self.file_list.addItem(f"‚ùå L·ªói t·∫£i file: {e}")
                    return
            self.current_path = path  # C·∫≠p nh·∫≠t ƒë∆∞·ªùng d·∫´n hi·ªán t·∫°i
            self.file_list.clear()

        # N·∫øu ƒëang trong th∆∞ m·ª•c con, th√™m n√∫t quay l·∫°i
            if path:
                self.file_list.addItem("‚¨ÜÔ∏è .. (Quay l·∫°i)")

            for content in contents:
                item_label = content.path if content.type == "file" else f"üìÅ {content.path}"
                self.file_list.addItem(item_label)

        except Exception as e:
            import traceback
            error_msg = traceback.format_exc()
            print(error_msg)  # In l·ªói chi ti·∫øt ra terminal
            self.file_list.addItem(f"‚ùå L·ªói t·∫£i file: {e}")

    def go_back(self):
        if self.current_path:
            parent_path = "/".join(self.current_path.split("/")[:-1])
            self.load_repository_files(parent_path)

    def upload_file(self):
        repo_name = self.repo_input.text().strip()
    
        if not repo_name:
            self.file_list.addItem("‚ùå Vui l√≤ng nh·∫≠p repository!")
            return

    # Ch·ªçn file ƒë·ªÉ upload
        file_dialog = QFileDialog()
        file_path, _ = file_dialog.getOpenFileName(self, "Ch·ªçn file ƒë·ªÉ upload")

        if not file_path:
            return

    # L·∫•y t√™n file (kh√¥ng g·ªìm ƒë∆∞·ªùng d·∫´n)
        file_name = os.path.basename(file_path)

    # ƒê∆∞a file v√†o th∆∞ m·ª•c hi·ªán t·∫°i (n·∫øu c√≥)
        remote_path = f"{self.current_path}/{file_name}" if self.current_path else file_name

        try:
            self.repo = self.github_client.get_repo(repo_name)

            # Ki·ªÉm tra repo c√≥ tr·ªëng kh√¥ng
            try:
                contents = self.repo.get_contents("")
            except github.GithubException as e:
                if e.status == 404:  # Repo tr·ªëng
                    self.file_list.addItem("üìÇ Repository tr·ªëng! ƒêang t·∫°o file ƒë·∫ßu ti√™n...")
                    self.create_initial_file(file_name, file_path)
                    return

        # ƒê·ªçc n·ªôi dung file
            with open(file_path, "rb") as f:
                content = f.read()

        # Ki·ªÉm tra xem file ƒë√£ t·ªìn t·∫°i ch∆∞a
            try:
                existing_file = self.repo.get_contents(remote_path)
                self.repo.update_file(
                    existing_file.path, f"üîÑ C·∫≠p nh·∫≠t {file_name}", content, existing_file.sha, branch="main"
                )
                self.file_list.addItem(f"‚úÖ C·∫≠p nh·∫≠t file: {file_name}")
            except:
                self.repo.create_file(remote_path, f"üì§ Upload {file_name}", content, branch="main")
                self.file_list.addItem(f"‚úÖ Upload th√†nh c√¥ng: {file_name}")

        except Exception as e:
            import traceback
            error_msg = traceback.format_exc()
            print(error_msg)  # In l·ªói chi ti·∫øt ra terminal
            self.file_list.addItem(f"‚ùå L·ªói upload file: {e}")

    def update_file(self):
        selected_item = self.file_list.currentItem()
        if selected_item and self.repo:
            file_path = selected_item.text()
            local_file_path, _ = QFileDialog.getOpenFileName(self, "Ch·ªçn file ƒë·ªÉ c·∫≠p nh·∫≠t")
            if local_file_path:
                with open(local_file_path, "rb") as file:
                    content = file.read()
                try:
                    contents = self.repo.get_contents(file_path)
                    self.repo.update_file(contents.path, f"C·∫≠p nh·∫≠t {file_path}", content, contents.sha, branch="main")
                    self.file_list.addItem(f"‚úÖ ƒê√£ c·∫≠p nh·∫≠t {file_path}")
                except Exception as e:
                    self.file_list.addItem(f"‚ùå L·ªói c·∫≠p nh·∫≠t {file_path}: {e}")

    def upload_folder(self):
        folder_path = QFileDialog.getExistingDirectory(self, "Ch·ªçn th∆∞ m·ª•c")
        if folder_path and self.repo:
            for root, _, files in os.walk(folder_path):
                for file in files:
                    file_path = os.path.join(root, file)
                    relative_path = os.path.relpath(file_path, folder_path)
                    with open(file_path, "rb") as f:
                        content = f.read()
                    try:
                        self.repo.create_file(relative_path, f"Upload {relative_path}", content, branch="main")
                        self.file_list.addItem(f"‚úÖ ƒê√£ upload {relative_path}")
                    except Exception as e:
                        self.file_list.addItem(f"‚ùå L·ªói upload {relative_path}: {e}")

    def delete_file(self):
        selected_item = self.file_list.currentItem()
        if selected_item and self.repo:
            file_path = selected_item.text()
            try:
                contents = self.repo.get_contents(file_path)
                self.repo.delete_file(contents.path, f"X√≥a {file_path}", contents.sha, branch="main")
                self.file_list.takeItem(self.file_list.row(selected_item))
                self.file_list.addItem(f"‚úÖ ƒê√£ x√≥a {file_path}")
            except Exception as e:
                self.file_list.addItem(f"‚ùå L·ªói x√≥a {file_path}: {e}")

    def create_repository(self):
        repo_name = self.new_repo_input.text().strip()
        is_private = self.repo_visibility.currentText() == "Private"
        
        if not self.github_token:
            QMessageBox.warning(self, "L·ªói", "Vui l√≤ng nh·∫≠p GitHub Token!")
            return
        if not repo_name:
            QMessageBox.warning(self, "L·ªói", "Vui l√≤ng nh·∫≠p t√™n repository!")
            return

        try:
            g = github.Github(self.github_token)
            user = g.get_user()

            # Ki·ªÉm tra n·∫øu token kh√¥ng c√≥ quy·ªÅn t·∫°o repo
            if not user.login:
                QMessageBox.critical(self, "L·ªói", "Token kh√¥ng c√≥ quy·ªÅn t·∫°o repository. H√£y ki·ªÉm tra l·∫°i!")
                return
            for repo in user.get_repos():
                if repo.name == repo_name:
                    QMessageBox.warning(self, "L·ªói", f"Repository '{repo_name}' ƒë√£ t·ªìn t·∫°i!")
                    return

            user.create_repo(repo_name, private=is_private)
            QMessageBox.information(self, "Th√†nh c√¥ng", f"Repository '{repo_name}' ƒë√£ ƒë∆∞·ª£c t·∫°o th√†nh c√¥ng!")
        except Exception as e:
            QMessageBox.critical(self, "L·ªói", f"Kh√¥ng th·ªÉ t·∫°o repository: {e}")

    def create_initial_file(self, file_name, file_path):
        """ T·∫°o file ƒë·∫ßu ti√™n trong repository tr·ªëng """
        try:
            if not self.repo:
                self.file_list.addItem("‚ùå Ch∆∞a k·∫øt n·ªëi GitHub!")
                return

            with open(file_path, "rb") as f:
                content = f.read()

            self.repo.create_file(file_name, f"üì§ T·∫°o file ƒë·∫ßu ti√™n: {file_name}", content, branch="main")
            self.file_list.addItem(f"‚úÖ ƒê√£ t·∫°o file ƒë·∫ßu ti√™n: {file_name}!")

        except Exception as e:
            self.file_list.addItem(f"‚ùå L·ªói khi t·∫°o file ƒë·∫ßu ti√™n: {e}")

    def generate_github_token(self):
        """ M·ªü trang t·∫°o token GitHub v·ªõi c√°c quy·ªÅn c·∫ßn thi·∫øt """
        token_url = "https://github.com/settings/tokens/new?scopes=repo,public_repo,delete_repo&description=GitHubManagerToken"
        webbrowser.open(token_url)
        QMessageBox.information(self, "H∆∞·ªõng d·∫´n", "H√£y t·∫°o token v·ªõi c√°c quy·ªÅn: repo, public_repo, delete_repo v√† sao ch√©p v√†o ·ª©ng d·ª•ng.")

    def delete_repository(self):
        """ X√≥a repository ƒë√£ nh·∫≠p """
        repo_name = self.repo_input.text().strip()
        if not repo_name:
            QMessageBox.warning(self, "L·ªói", "Vui l√≤ng nh·∫≠p t√™n repository!")
            return

        confirm = QMessageBox.question(self, "X√°c nh·∫≠n x√≥a", f"B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën x√≥a repository '{repo_name}'? H√†nh ƒë·ªông n√†y kh√¥ng th·ªÉ ho√†n t√°c!",
                                   QMessageBox.StandardButton.Yes | QMessageBox.StandardButton.No, QMessageBox.StandardButton.No)
        if confirm == QMessageBox.StandardButton.No:
            return

        try:
            g = github.Github(self.github_token)
            repo = g.get_repo(repo_name)
            repo.delete()
            QMessageBox.information(self, "Th√†nh c√¥ng", f"Repository '{repo_name}' ƒë√£ ƒë∆∞·ª£c x√≥a th√†nh c√¥ng!")
        except Exception as e:
            QMessageBox.critical(self, "L·ªói", f"Kh√¥ng th·ªÉ x√≥a repository: {e}")

    def open_repository(self, item):
        """ M·ªü repository ho·∫∑c th∆∞ m·ª•c khi click ƒë√∫p """
        item_text = item.text().strip()

        if item.text() == "‚¨ÜÔ∏è .. (Quay l·∫°i)":
            self.go_back()
            return

        if item_text.startswith("üìÅ "):
            folder_name = item_text[2:].strip()  # Lo·∫°i b·ªè bi·ªÉu t∆∞·ª£ng "üìÅ "
            self.current_path = f"{self.current_path}/{folder_name}" if self.current_path else folder_name
            self.load_repository_files(self.current_path)
        else:
            self.repo_input.setText(item_text)
            self.current_path = ""  # Reset ƒë∆∞·ªùng d·∫´n khi m·ªü repo m·ªõi
            self.load_repository_files()


if __name__ == "__main__":
    app = QApplication(sys.argv)
    
    # Hi·ªÉn th·ªã Splash Screen trong 3 gi√¢y
    splash = SplashScreen()
    splash.show()
    
    def start_app():
        global window  # Gi·ªØ bi·∫øn window t·ªìn t·∫°i
        splash.close()
        window = GitHubManager()
        window.show()

    
    QTimer.singleShot(3000, start_app)  # 3 gi√¢y r·ªìi m·ªü app
    
    sys.exit(app.exec())

